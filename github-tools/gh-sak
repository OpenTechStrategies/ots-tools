#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# gh-sak: A GitHub "Swiss Army knife" for doing batch manipulation of
#         things (issues, labels, etc) in a GitHub repository.
# 
# github.com/OpenTechStrategies/ots-tools/blob/master/github-tools/gh-sak
#
# Copyright (C) 2018 Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

__doc__ = """\
Manipulate issues associated with a GitHub repository.  Usage:

  $ ./gh-sak --root OWNER[/REPOS] [ --infile INPUT_FILE ] COMMAND [ARGS...]

OWNER/REPOS is something like "opentechstrategies/ots-tools".

Some COMMANDs, e.g., listing all issues, require no further specification.
Others COMMANDs, such as determining different labels across a bunch
of issues, operate batch-style on an input set passed via INPUT_FILE.
INPUT_FILE is a JSON-format file whose structure depends on COMMAND.

GitHub authentication and authorization
---------------------------------------

Each time you run this script, you will be prompted for a GitHub
authorization token.  If you don't want to be prompted, put the token
as the first line of a file (you might want to restrict that file's
permissions so that only you can read it) and pass the file with the
'--auth-token-file' option, like so:

  $ ./gh-sak --auth-token-file FILE_CONTAINING_TOKEN ...

(We don't offer a way to pass the token directly via the command line
because then it could be leaked via 'ps' listings, shell history, etc.)

Available COMMANDs
------------------

* "list-repositories"  (no input file)

   List all the repositories under OWNER (i.e., use with '--root OWNER').

   This is the only command for which the /REPOSITORY component of the
   parameter to the --root option is not required (indeed, must be
   left off).

* ticket-json TICKET_NUMBER

  Emit JSON showing the basics of issue or pull request TICKET_NUMBER.

* "issues-summary-org"  OR  "pull-requests-summary-org"  (no input file)

  This lists all issues (or pull requests), both open and closed, in
  an Emacs Org Mode format, like so:

    * [[https://github.com/blah/blah/issues/3][3]]   (open): issue title
  
      body (i.e., first comment) here
  
    ** LABELS
       - some label name
       - another label name

    * [[https://github.com/blah/blah/issues/2][1]]   (open): other title
  
      other body (i.e., first comment) here
  
    * [[https://github.com/blah/blah/issues/1][1]] (closed): another title
  
      another body (i.e., first comment) here

    ** LABELS
       - some label name
       - yet a third distinct label name

* "list-labels"  (no input file)

  Print a list of all labels in the repository, one per line.

* "edit-issues"  (input file required)

  Manipulate issues in various ways.  Right now, the only manipulation
  supported is adding/removing existing labels to/from issues.  (See
  also the "edit-labels" command.)

  The top level structure of the JSON is a list.  Each element of that
  list is a dictionary.  The only required entry in each dictionary is
  "issue", whose value is an issue number (an integer), and each
  remaining entry is an action to take regarding that issue.  The two
  actions implemented so far are "add-labels" and "remove-labels",
  and the value in both cases is a list of label names (strings).
  For example:

    [
        {
            "issue":         1729,
            "add-labels":    ["REQ-1", "HARD"],
            "remove-labels": ["REQ-5", "EASY"]
	},
        ...
    ]

  Labels will be created as necessary, always with a gray background,
  but if a label already exists its current color will not be changed.

  Removing a label that doesn't exist is merely a no-op, not an error.

  List elements are processed in order from top to bottom; it's fine,
  though somewhat silly, for the same issue to appear multiple times.

* "edit-labels"  (input file required)

  Create, delete, rename, and change colors of labels.

  The JSON is a list of sublists:

    [ [ OLD_LABEL_NAME, NEW_LABEL_NAME, COLOR ] ...]

  Each sublist can be used to create a new label, delete an existing
  label, rename a label, change the color of a label, or rename and
  change color simultaneously.  This logic chart explains how:

    OLD_LABEL_NAME null:
      NEW_LABEL_NAME null:
        COLOR null:     ==>  ERROR
        COLOR "color":  ==>  ERROR
      NEW_LABEL_NAME "new_name":
        COLOR null:     ==>  create new label with default gray ("e2e2e2")
        COLOR "color":  ==>  create new label with color "color"
    OLD_LABEL_NAME "old_name"
      NEW_LABEL_NAME null:
        COLOR null:     ==>  delete old label
        COLOR "color":  ==>  give old label new color "color"
      NEW_LABEL_NAME "new_name":
        COLOR null:     ==>  rename label but preserve old color
        COLOR "color":  ==>  rename label and give it new color "color"

  The top-level list is processed in order, and each element takes
  effect as soon as it is processed.

Notes
-----

This code is not librarized yet.  To be a library, it would need at
least these changes:

   - All the errors followed by sys.exit(1) would need to become
     exceptions raised.

   - The inline print statements would need to be omitted or become
     some kind of progress callback.
"""

import sys
import time
import getopt
import getpass
import json
import github
import github.GithubException

def get_input(infile):
    """Return the data structure represented by the JSON in INFILE.
    If INFILE is None, exit with usage recommendation and error."""
    if infile is None:
        sys.stderr.write("ERROR: "
                         "'--input-file INPUT_FILE' required\n"
                         "       (run with --help to see usage)\n")
        sys.exit(1)
    return json.load(infile)

def main():
    command = None
    owner_name = None
    repos_name = None
    infile = None
    auth_token = None
    second_arg = None

    try:
        (opts, args) = getopt.getopt(
            sys.argv[1:], "h?", 
            ["help", "usage", "auth-token-file=", "root=", "infile=",])
    except getopt.GetoptError as err:
        sys.stderr.write(str(err))
        sys.stderr.write("\n")
        sys.exit(1)

    for opt, optarg in opts:
        if opt in ("-h", "-?", "--help", "--usage",):
            print(__doc__)
            sys.exit(0)
        elif opt in ("--auth-token-file",):
            with open(optarg, "r") as f:
                auth_token = f.readline().rstrip()
        elif opt in ("--root",):
            # '--repository' for backwards compatibility only
            try:
                owner_name, repos_name = optarg.split("/")
            except ValueError:
                owner_name = optarg
            if owner_name == "":
                owner_name = None
            if repos_name == "":
                repos_name == None
        elif opt in ("--infile",):
            if optarg == "-":
                infile = sys.stdin
            else:
                infile = open(optarg, "r")
        
    if len(args) < 1:
        sys.stderr.write("ERROR: "
                         "command required (run with --help to see usage)\n")
        sys.exit(1)
    elif len(args) <= 2:
        command = args[0]
        if len(args) == 2:
            second_arg = args[1]
    else:
        sys.stderr.write("ERROR: "
                         "too many commands (run with --help to see usage)\n")
        sys.exit(1)

    if ((owner_name is None)
        or ((command != "list-repositories") and (repos_name is None))):
        sys.stderr.write("ERROR: '--root' option must supply "
                         "owner and (usually) repository, like this:\n")
        sys.stderr.write("\n")
        sys.stderr.write("  owner_name/repository_name\n")
        sys.stderr.write("\n")
        sys.stderr.write("For example:\n")
        sys.stderr.write("\n")
        sys.stderr.write("  solutionguidance/psm\n")
        sys.stderr.write("\n")
        sys.stderr.write("(The repository_name may be omitted for "
                         "the \"list-repositories\" command.)\n")
        sys.stderr.write("\n")
        sys.exit(1)

    if auth_token is None:
        auth_token = getpass.getpass("GitHub authorization token ('?' for help): ")
    if auth_token == "?" or auth_token == "":
        print("https://help.github.com/articles/"
              "creating-a-personal-access-token-for-the-command-line")
        print("has instructions for generating a GitHub API personal"
              "access token.")
        print("")
        auth_token = getpass.getpass("GitHub authorization token: ")

    g = github.Github(auth_token)

    # We're taking advantage of some lazy polymorphism here.  Either
    # "organization/repository" or "username/repository" will work,
    # even though we only advertize the former.  So far, all of the
    # methods we're invoking exist for either type of object.  If that
    # changes, we can make a wrapper object to handle method dispatch.
    try:
        owner = g.get_organization(owner_name)
    except github.UnknownObjectException as e:
        owner = g.get_user(owner_name)

    if repos_name:
        repos = owner.get_repo(repos_name)

    if command == "list-repositories":
        # You'd think there'd be a method on owner that would list all
        # the repositories for that user or organization, but no,
        # apparently you're supposed to do a generic search keyed on
        # user (which apparently is synonymous with org for this,
        # though we try both just in case, since "org" is apparently
        # supported too and we don't know which kind owner is).
        #
        # If it's an org that it uses single sign-on (SSO), you may
        # need to SSO-authorize your personal access token.  See
        # https://help.github.com/articles/authorizing-a-personal-access-token-for-use-with-a-saml-single-sign-on-organization/
        try:
            repositories = g.search_repositories("user:%s" % owner_name)
        except:
            # Probably we never get here?  Not sure.  "user" vs "org",
            # in both the GitHub API and in PyGithub, is confusing.
            repositories = g.search_repositories("org:%s" % owner_name)
        wait_counter = 0
        for r in repositories:
            print("%s" % r.full_name)
            wait_counter += 1
            # Work around GitHub's search-specific rate-limit.  (There
            # is also a results-per-query limit of 1000, separate from
            # the rate limit, but let's solve one thing at a time.)
            if wait_counter >= 50:
                wait_counter = 0
                time.sleep(2.5)

    elif command == "ticket-json":
        ticket_number = second_arg
        if ticket_number is None:
            sys.stderr.write("ERROR: missing TICKET_NUMBER argument\n")
            sys.exit(1)
        else:
            ticket_number = int(ticket_number)

        try:
            ticket = repos.get_issue(ticket_number)
        except:
            ticket = repos.get_pull(ticket_number)

        # The native 'issue' and 'pull' classes aren't serializable,
        # so just put the parts we want into a dict for JSON encoding.
        ticket = { "number": ticket.number,
                  "title": ticket.title,
                  "state": ticket.state,
                  "body": ticket.body }
        print("%s" % json.JSONEncoder().encode(ticket))

    elif command == "issues-summary-org":
        # TextWrapper appears to be buggy; at least, this wrapper
        # doesn't have the effects I'd expect it to on an issue
        # body.  Leaving this here for now, but not using it.
        #
        # import textwrap
        # wrapper = textwrap.TextWrapper(initial_indent='  ',
        #                                subsequent_indent='  ',
        #                                replace_whitespace=False,
        #                                drop_whitespace=False,
        #                                break_long_words=False,
        #                                break_on_hyphens=False)
        issues = repos.get_issues(state="all")  # both open and closed
        for issue in issues:
            print("* [[https://github.com/%s/%s/issues/%d][%3d]] %s: %s" 
                  % (owner_name, repos_name, issue.number, issue.number,
                     "{:>8}".format("(" + issue.state + ")"), 
                     issue.title))
            print("")
            # The first comment is actually called the 'body',
            # in the API.  Yes, even though the header of that
            # comment looks exactly like the header of every
            # other subsequent comment, and even though the
            # header of that first comment even *says* "kfogel
            # commented a day ago", nooooo, it's not a
            # comment, it's a body.  Every body wants to be
            # some body, I guess.
            if issue.body is not None:
                # See earlier comment about not using textwrap.
                # print("%s" % wrapper.fill(issue.body))
                print("%s" 
                      % "\n  ".join(("\n" + issue.body).splitlines())[1:])
            else:
                print("<<< THIS ISSUE HAS NO BODY >>>")
            print("")
            any_labels = False
            for label in issue.labels:
                if any_labels is False:
                    any_labels = True
                    print("** LABELS")
                print("   - %s" % label.name)
            any_comments = False
            # Getting rate-limited, so just print num comments for now.
            # We really need to switch to the v4 API, which is more
            # query-efficient and has a higher rate limit too, but for
            # now, let's just print comment counts instead of comments.
            print("** COMMENTS: %d" % issue.comments)
            # for comment in issue.get_comments():
            #     if any_comments is False:
            #         any_comments = True
            #         print("** COMMENTS")
            #     print("   - %s (comment #%d at %s)" % (comment.user.name, comment.id, comment.created_at))
            if issue.pull_request is not None:
                print("** PULL REQUEST: %s" % issue.pull_request.html_url)
    elif command == "pull-requests-summary-org":
        pr_tickets = repos.get_pulls(state="all")  # both open and closed
        for pr_ticket in pr_tickets:
            print("* [[https://github.com/%s/%s/pull/%d][%3d]] %s: %s" 
                  % (owner_name, repos_name, pr_ticket.number, pr_ticket.number,
                     "{:>8}".format("(" + pr_ticket.state + ")"), 
                     pr_ticket.title))
            print("")
            # The first comment is actually called the 'body',
            # in the API.  Yes, even though the header of that
            # comment looks exactly like the header of every
            # other subsequent comment, and even though the
            # header of that first comment even *says* "kfogel
            # commented a day ago", nooooo, it's not a
            # comment, it's a body.  Every body wants to be
            # some body, I guess.
            if pr_ticket.body is not None:
                # See earlier comment about not using textwrap.
                # print("%s" % wrapper.fill(pr_ticket.body))
                print("%s" 
                      % "\n  ".join(("\n" + pr_ticket.body).splitlines())[1:])
            else:
                print("<<< THIS PR_TICKET HAS NO BODY >>>")
            print("")
            any_labels = False
            for label in pr_ticket.labels:
                if any_labels is False:
                    any_labels = True
                    print("** LABELS")
                print("   - %s" % label.name)
            any_comments = False
            # Getting rate-limited, so just print num comments for now.
            # We really need to switch to the v4 API, which is more
            # query-efficient and has a higher rate limit too, but for
            # now, let's just print comment counts instead of comments.
            print("** REVIEW COMMENTS: %d" % pr_ticket.review_comments)
            print("** COMMENTS: %d" % pr_ticket.comments)
            # for comment in pr_ticket.get_comments():
            #     if any_comments is False:
            #         any_comments = True
            #         print("** COMMENTS")
            #     print("   - %s (comment #%d at %s)" % (comment.user.name, comment.id, comment.created_at))
    elif command == "list-labels":
        labels = repos.get_labels()
        for label in labels:
            print("%s" % label.name)
    elif command == "edit-issues":
        elements = get_input(infile)
        for element in elements:
            issue_number = element['issue']
            labels_to_add = element.get('add-labels')
            labels_to_remove = element.get('remove-labels')
            if (labels_to_add is None) and (labels_to_remove is None):
                continue
            issue = repos.get_issue(issue_number)
            if labels_to_add is not None:
                for label_name in labels_to_add:
                    try:
                        label = repos.get_label(label_name)
                    except github.GithubException as e:
                        label = repos.create_label(label_name, "e2e2e2")
                    issue.add_to_labels(label)
            labels_found = issue.labels
            if labels_to_remove is not None:
                for label_name in labels_to_remove:
                    if label_name in [x.name for x in labels_found]:
                        label = repos.get_label(label_name)
                        issue.remove_from_labels(label)
            # We have to refetch the issue to see the above changes take
            # effect in our local object, because it turns out PyGithub
            # doesn't automatically keep local objects in sync with the
            # changes made to upstream.  If we didn't re-fetch, then when
            # we print out the issue and its labels below, we'd see the
            # labels from *before* any additions/removals done above.
            issue = repos.get_issue(issue_number)
            print("%5d %s: %s" % (issue.number,
                                  "{:>8}".format("(" + issue.state + ")"),
                                  issue.title))
            for label in issue.labels:
                print("                - label \"%s\"" % label.name)
    elif command == "edit-labels":
        elements = get_input(infile)
        for sublist in elements:
            old_label_name = None
            new_label_name = None
            color = None
            if len(sublist) == 3:
                old_label_name = sublist[0]
                new_label_name = sublist[1]
                color = sublist[2]
            elif len(sublist) == 2:
                old_label_name = sublist[0]
                new_label_name = sublist[1]
            elif len(sublist) > 3:
                sys.stderr.write("ERROR: label sublist too long:\n")
                sys.stderr.write("       %s\n" % sublist)
                sys.exit(1)
            else:
                sys.stderr.write("ERROR: label sublist too short:\n")
                sys.stderr.write("       %s\n" % sublist)
                sys.exit(1)
            if (color is not None) and (color[0] == "#"):
                color = color[1:]
            try:
                old_label = repos.get_label(old_label_name)
            except github.UnknownObjectException as e:
                old_label = None
            if old_label is None:
                if old_label_name is not None:
                    sys.stderr.write("WARNING: label '%s' not found\n" 
                                     % old_label_name)
                elif new_label_name is None:
                    sys.stderr.write("ERROR: "
                                     "neither old nor new label name given\n")
                    sys.exit(1)
                else:
                    if color is None:
                        color = "e2e2e2"
                    repos.create_label(new_label_name, color)
                    print("CREATED label '%s'" % new_label_name)
            else: # we have an existing label
                if new_label_name is None:
                    if color is None:
                        old_label.delete()
                        print("DELETED label '%s'" % old_label_name)
                    else:
                        old_label.edit(old_label_name, color)
                        print("CHANGED label '%s' color to '#%s'" 
                              % (old_label_name, color))
                else: # we have a new label name too
                    if color is None:
                        color = old_label.color
                    old_label.edit(new_label_name, color)
                    if color != old_label.color:
                        print("RENAMED label '%s' to '%s' (new color '#%s')" 
                              % (old_label_name, new_label_name, color))
                    else:
                        print("RENAMED label '%s' to '%s'" 
                              % (old_label_name, new_label_name))
    else:
        sys.stderr.write("ERROR: unknown command '%s'\n" % command)
        sys.exit(1)


if __name__ == '__main__':
    main()
