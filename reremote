#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (c) 2022 Open Tech Strategies, LLC
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# If you did not receive a copy of the GNU General Public License
# along with this program, see <http://www.gnu.org/licenses/>.

"""Update local Git repositories for an origin remote that has moved.  

Usage:

  $ reremote OLD_URL NEW_URL

Updates 'origin' remotes from OLD_URL to NEW_URL in all matching Git
repositories at or under the current working directory.

(Some day we may extend this to handle non-origin remotes too, but
the first use case is for origins so that's what we started with.)

"""

import os
import re
import sys
import getopt
import subprocess

def main():
    old_url = None
    new_url = None

    try:
        (opts, args) = getopt.getopt(sys.argv[1:], "h?", 
                                     ["help", "usage",])
    except getopt.GetoptError as err:
        sys.stderr.write(str(err))
        sys.stderr.write("\n")
        sys.exit(1)

    for opt, optarg in opts:
        if opt in ("-h", "-?", "--help", "--usage"):
            print(__doc__)
            sys.exit(0)

    if len(args) < 2:
        sys.stderr.write(
            "ERROR: two arguments required: "
            "OLD_URL and NEW_URL\n")
        sys.stderr.write("\n" + __doc__ + "\n")
        sys.exit(1)
    else:
        old_url = args[0]
        new_url = args[1]

    dirs = [os.path.dirname(x) for x in subprocess.run(
        ["find", ".", "-type", "d", "-name", ".git", "-print",],
        stdout=subprocess.PIPE).stdout.decode('utf-8').split()]

    for dir in dirs:
        saved_cwd = os.getcwd()
        os.chdir(dir)
        out = subprocess.run(
            ["git", "remote", "show", "origin",],
            stdout=subprocess.PIPE).stdout.decode('utf-8').split("\n")
        seen_url = None
        if out[0].startswith("* remote origin"):
            for elt in out:
                if re.match("^\\s*(Fetch|Push)\\s+URL:\\s+", elt) is not None:
                    this_url = ':'.join(elt.split(":")[1:]).strip()
                    if seen_url:
                        if this_url != seen_url:
                            sys.stderr.write(
                                "WARNING: Found different Fetch and Push URLs\n")
                            sys.stderr.write(
                                "       in '%s'; skipping.\n" % dir)
                        else:
                            if this_url == old_url:
                                subprocess.run(["git", "remote", "set-url",
                                                "origin", new_url, old_url,])
                                print("Origin remote in '%s' updated to '%s'."
                                      % (dir, new_url))
                            seen_url = None
                    else:
                        seen_url = this_url
        else:  # can't happen, in theory
            sys.stderr.write(
                "WARNING: skipping non-origin remote: '%s'\n" % out[0])
        os.chdir(saved_cwd)


if __name__ == '__main__':
  main()
