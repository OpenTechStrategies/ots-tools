#!/usr/bin/env python3

"""Quick script to check OTS server apache versions to see if we are
using a bad version of apache anywhere.

"Tracked as CVE-2021-41773, the vulnerability affects only Apache web
servers running version 2.4.49 and occurs because of a bug in how the
Apache server converts between different URL path schemes (a process
called path or URI normalization)."
https://therecord.media/apache-fixes-actively-exploited-web-server-zero-day/

"""

import getpass
import os
import pathlib
import paramiko
import re
import sys
import yaml

def err(msg):
    sys.stderr.write(msg)
    sys.stderr.write("\n")
    sys.exit(-1)

def get_servers():
    """Read, parse, and return the server inventory from svn repo yaml file"""

    try:
        infra_dir = pathlib.Path(os.environ['OTS_DIR'], "infra")
    except KeyError:
        err("Please set OTS_DIR environment variable to the root of your OTS svn checkout")

    servers_fname = pathlib.Path(infra_dir, "server-inventory.yaml")
    raw_yaml = servers_fname.read_text()

    try:
        return yaml.safe_load(raw_yaml)
    except yaml.YAMLError as e:
        print(e)

def get_locations(server):
    """Given a server record from the server inventory, return a list of
    all hostnames and ip addresses"""

    ret = []
    if 'hostnames' in server:
        ret.extend(server['hostnames'])
    if 'ip_addrs' in server:
        ret.extend(server['ip_addrs'])
    return ret

def run_cmd_ssh(server, cmd, user="", port=22):
    """Run cmd on server, return result as string.

    Assumes we can get into server via your ssh agent credentials"""

    if not user:
        user = getpass.getuser()

    ret = ""
    s = paramiko.SSHClient()
    s.load_system_host_keys()
    s.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    s.connect(server, port, user)
    (stdin, stdout, stderr) = s.exec_command(cmd)
    ret = stdout.readlines()
    s.close()
    return "\n".join(ret)

def grep(string, pattern):
    strings = string.split("\n")
    r = re.compile(pattern)
    return list(filter(r.match, strings))

servers = get_servers()
auth_problems = []
needs_upgrade = []
for server in servers:
    locations = get_locations(server)
    if locations == []:
        err(f"Can't find ip or routable name for server: {server}")

    port = 22
    if 'ansible_port' in server:
        port = server['ansible_port']

    print(f"Checking server {locations[0]}...")
    try:
        packages = run_cmd_ssh(locations[0], "dpkg -l --no-pager", "root", port=port)
    except paramiko.ssh_exception.PasswordRequiredException:
        auth_problems.append(server)

    bad_apaches = grep(packages, "apache2.*2.4.49")
    if bad_apaches:
        needs_upgrade.append(server)
    else:
        print("good")

print("Servers that need apache ugprades")
for s in needs_upgrade:
    print(s)

print("Servers with auth problems (these weren't checked properly)")
for s in auth_problems:
    print(s)
